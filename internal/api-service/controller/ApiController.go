package controller

import (
	"errors"

	"github.com/abhirajranjan/gochat/pkg/logger"
	"github.com/gin-gonic/gin"
)

var (
	ErrVersionAlreadyExist error = errors.New("api version already exists")
	ErrInvalidVersion      error = errors.New("invalid api version")
)

type Version interface {
	// used to get the unique version to map itself
	GetVersion() string
	// called when respective version found
	Handle(*gin.RouterGroup, ...gin.HandlerFunc)
}

type ApiVersionController struct {
	//logger interface
	Logger logger.ILogger

	// holds all Version according based on there int64 version
	mapper map[string]Version

	// holds the group generated by versioning system
	group *gin.RouterGroup
}

// checks for empty value and initialize controller
func NewApiVersionController(controller *ApiVersionController) *ApiVersionController {
	if controller.mapper == nil {
		controller.mapper = map[string]Version{}
	}
	return controller
}

// register Version
//
// returns ErrVersionAlreadyExist in case version.GetVersion() is already registered
func (controller *ApiVersionController) RegisterVersion(version Version) error {
	if _, ok := controller.mapper[version.GetVersion()]; ok {
		return ErrVersionAlreadyExist
	}
	controller.mapper[version.GetVersion()] = version
	return nil
}

// generate versioning system from gin group passed
//
// calls ErrorFunction incase invalid or unregistered version passed.
func (controller *ApiVersionController) Handle(group *gin.RouterGroup, handler ...gin.HandlerFunc) {
	controller.group = group.Group("/")
	controller.group.Use(handler...)
	controller.group.Use(controller.loggerHandler())

	controller.addHandlerToVersion()
}

// calls handler of all versions registered
func (controller *ApiVersionController) addHandlerToVersion(handler ...gin.HandlerFunc) {
	// check if group is created
	if controller.group != nil {
		for v := range controller.mapper {
			version := controller.mapper[v]
			if controller.Logger != nil {
				controller.Logger.Debugf("adding handler to api version %s", version.GetVersion())
			}
			version.Handle(controller.group, handler...)
		}
	}
}

// handler to log entries if logger in debug state
func (controller *ApiVersionController) loggerHandler() gin.HandlerFunc {
	return func(ctx *gin.Context) {
		if controller.Logger != nil {
			controller.Logger.Debugf("api called with %s", ctx.Request.URL)
		}
	}
}
